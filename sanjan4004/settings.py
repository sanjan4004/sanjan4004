"""
Django settings for sanjan4004 project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-b!r4nzuiyVGJSFIq77sp[olms86x@@f(0&$r8t-p5iytubyffu/jk))99((gyb(1#$5@716ae0_w&wh49qflmck7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# settings.py
ALLOWED_HOSTS = ['worldttance.com', 'www.worldttance.com']
SITE_ID = 9 #worldttance.com


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',


    'djmoney',
    'djmoney.contrib.exchange',
    'rest_framework',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_bootstrap5',
    'WorldTtance',
    'payments',
    'corsheaders',


    #  Add this line
    

    # Third-party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    
]




# Authentication settings
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]



# Django Allauth settings for email verification during signUp and payment confirmation

# Optional but recommended
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = 'dashboard'
ACCOUNT_LOGOUT_REDIRECT_URL = 'homepage'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_LOGIN_METHODS = {'email', 'username'}
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Forces email verification
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_EMAIL_CONFIRMATION_HMAC = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGOUT_ON_GET = True

# Email backend (For development, use console backend)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
#Email Payment Notification to adminWallet
#In production, use SMTP
# EMAIL_HOST = 'smtp.gmail.com'
#EMAIL_PORT = 587
#EMAIL_USE_TLS = True
#EMAIL_HOST_USER = 'carlosdalton11@gmail.com'
#EMAIL_HOST_PASSWORD = 'your_email_password'

#EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
#EMAIL_HOST = "smtp.gmail.com"  # Change based on your provider
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = "carlosdalton11@gmail.com"  # Your email
EMAIL_HOST_PASSWORD = "lrwa cnud ohwe vqex"  # Use an app password if needed
DEFAULT_FROM_EMAIL = "worldttance@gmail.com"

#REST TO RENDER JSONrenderer
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}






MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',

    # Allauth middleware (Required)
    'allauth.account.middleware.AccountMiddleware',

]





ROOT_URLCONF = 'sanjan4004.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sanjan4004.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {

        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'WorldTtance_db',  # Your database name
        'USER': 'postgres',        # Your PostgreSQL username
        'PASSWORD': 'SanJan4004..',  # Your PostgreSQL password
        'HOST': 'localhost',       # Keep 'localhost' if running locally
        'PORT': '5432',            # Default PostgreSQL port
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators



AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
#STATIC_URL = 'static/'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

#for kyc media  ,Debug KYC Image Uploads,If KYC images are not saving:
import os

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Use Redis as the message broker
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'




from dotenv import load_dotenv
load_dotenv()
import environ
env = environ.Env()
environ.Env.read_env()
import os

#DJANGO CREDS
DJANGO_API_SECRET_KEY = os.getenv("DJANGO_API_SECRET_KEY", "default-api-key")
DJANGO_API_URL= os.getenv("DJANGO_API_URL")
DJANGO_WEBHOOK_URL= os.getenv("DJANGO_WEBHOOK_URL")


#BINANCE CREDS
BINANCE_API_BASE_URL = "https://testnet.binance.vision"
BINANCE_ADMIN_WALLET = {
    "api_key": os.getenv("BINANCE_API_KEY"),
    "api_secret": os.getenv("BINANCE_API_SECRET"),
    "wallet_address": os.getenv("BINANCE_WALLET_ADDRESS"),
}



#FLUTTERWAVE CREDS
FLUTTERWAVE_PUBLIC_KEY=env("FLW_PUBLIC_KEY")
FLUTTERWAVE_SECRET_KEY=env("FLW_SECRET_KEY")
FLUTTERWAVE_ENCRYPTION_KEY=env("FLW_ENCRYPTION_KEY")
FLUTTERWAVE_REDIRECT_URL = env("FLW_REDIRECT_URL") #FOR INITIATE PAYMNET
FLW_SECRET_HASH=env("FLW_SECRET_HASH")

FLUTTERWAVE_BASE_URL="https://api.flutterwave.com/v3"
FLUTTERWAVE_NODE_API="https://127.0.0.1:5000/pay/flutterwave/initiate"
NODE_FLUTTERWAVE_URL = "https://api.worldttance.com"
FLUTTERWAVE_API_URL="https://api.flutterwave.com/v3/payments"
FLUTTERWAVE_URL = "https://api.flutterwave.com/v3/transfers"
# In settings.py
TRANSACTION_FEE_PERCENTAGE = 4  # Example: 4% transaction fee



BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "binance_transfer.log",
        },
    },
    "loggers": {
        "WorldTtance.utils": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


# settings.py
BASE_DIR = Path(__file__).resolve().parent.parent

DEBUG = False

ALLOWED_HOSTS = ['worldttance.com', 'www.worldttance.com']

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # All static content ends up here


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
    }
}



# settings.py
MEDIA_URL = "https://worldttance.com/media/"
STATIC_URL = "https://worldttance.com/static/"





# settings.py

# ALLOWED_HOSTS: specify which hosts are allowed to connect to the Django application
ALLOWED_HOSTS = [
    "localhost",  # for local development
    "127.0.0.1",  # for local development
    "worldttance.com",  # your production domain
    "www.worldttance.com",  # your production domain with www
]

# CSRF_TRUSTED_ORIGINS: trusted origins for CSRF, including your frontend and payment providers
CSRF_TRUSTED_ORIGINS = [
    "https://worldttance.com",  # production domain
    "https://www.worldttance.com",  # production domain with www
    "https://api.flutterwave.com",  # Allow Flutterwave
    "https://ravesandboxapi.flutterwave.com",  # Flutterwave sandbox (if using it)
]

# CORS (Cross-Origin Resource Sharing) settings
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins for testing purposes, use cautiously in production

CORS_ALLOWED_ORIGINS = [
    "https://worldttance.com",  # frontend app's domain
    "https://www.worldttance.com",  # frontend app's domain with www
    "https://api.flutterwave.com",  # Flutterwave production URL
    "https://ravesandboxapi.flutterwave.com",  # Flutterwave sandbox URL (if you're using sandbox)
]

# For secure communication and to expose your Django app to the internet using your new domain
CSRF_TRUSTED_ORIGINS += [
    "https://worldttance.com",  # Add production domain here
    "http://worldttance.com",  # If you're using HTTP (for local dev, not recommended for production)
]

# Optional: Allow any origin temporarily (not recommended in production)
# CORS_ALLOW_ALL_ORIGINS = True




# settings.py

BASE_CURRENCY = "USD"

# Default fallback rates (only if external API is down)
DEFAULT_EXCHANGE_RATES = {
    "KES": 122.5,
    "NGN": 1350.0,
    "UGX": 3850.0,
    "TZS": 2550.0,
    "ZAR": 19.0,
}



SESSION_COOKIE_SAMESITE = "None"
SESSION_COOKIE_SECURE = True  # Required if SAMESITE is None
